generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id              Int     @id @default(autoincrement())
  email           String  @unique
  name            String?
  hashedPassword String? @unique
  ownedTeams Team[]
  ownedPokemon Pokemon[]
}

model Team {
  id Int @id @default(autoincrement())
  teamName String?
  teamSummary String?
  teamOwner User @relation(fields: [teamOwnerId], references: [id])
  teamOwnerId Int
  partyPokemon Party[]
}

model Pokemon {
  id Int @id @default(autoincrement())
  pokeDex Int
  name String?
  nickName String?
  gender String?
  shiny Boolean @default(false)
  typeOne String?
  typeTwo String?
  teraType String?
  item String?
  ability String?
  nature String?
  moveOne String?
  moveTwo String?
  moveThree String?
  moveFour String?
  baseHp Int @default(1)
  baseAtk Int @default(1)
  baseDef Int @default(1)
  baseSpAtk Int @default(1)
  baseSpDef Int @default(1)
  baseSpeed Int @default(1)
  evHp Int @default(0)
  evAtk Int @default(0)
  evDef Int @default(0)
  evSpAtk Int @default(0)
  evSpDef Int @default(0)
  evSpeed Int @default(0)
  ivHp Int @default(1)
  ivAtk Int @default(1)
  ivDef Int @default(1)
  ivSpAtk Int @default(1)
  ivSpDef Int @default(1)
  ivSpeed Int @default(1)
  pokemonOwner User @relation(fields: [pokemonOwnerId], references:[id])
  pokemonOwnerId Int
  parties Party[]
}

model Party {
  id Int @id @default(autoincrement())
  partyTeam Team @relation(fields: [partyTeamId], references: [id])
  partyTeamId Int
  partyPokemon Pokemon @relation(fields: [partyPokemonId], references: [id])
  partyPokemonId Int

}
